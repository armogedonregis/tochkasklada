version: '3.8'

services:
  # api:
  #   container_name: backend
  #   build:
  #     context: ./server
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   env_file:
  #     - .env
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - app_network
      
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   env_file:
  #     - .env
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - api
  #   networks:
  #     - app_network

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_INITDB_ARGS: "--no-local"
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres: