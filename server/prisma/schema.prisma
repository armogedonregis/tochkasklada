generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// =============================================================
/// USERS MODEL CLIENT/ADMIN
/// -------------------------------------------------------------
model User {
  id String @id @default(uuid())

  email     String   @unique
  password  String
  isDeleted Boolean? @default(false)

  role UserRole @default(CLIENT)

  client   Client?
  admin    Admin?
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("users")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  CLIENT
}

model Client {
  id String @id @default(uuid())

  name      String
  isDeleted Boolean? @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  phones    ClientPhone[]
  rentals   CellRental[]
  emailLogs EmailLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("clients")
}

model ClientPhone {
  id String @id @default(uuid())

  phone     String
  comment   String?
  isDeleted Boolean? @default(false)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("client_phones")
}

model Admin {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id], onDelete: SetNull)

  adminResourcePermissions AdminResourcePermission[]

  audit AdminAuditLog[]

  closedLists    List[]
  closedRequests Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum AdminAction {
  CREATE
  UPDATE
  DELETE
  SOFT_DELETE
  RESTORE
  ASSIGN_ROLE
  REVOKE_ROLE
  ASSIGN_RESOURCE_ACCESS
  REVOKE_RESOURCE_ACCESS
  OTHER
}

model AdminAuditLog {
  id String @id @default(uuid())

  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: SetNull)

  entity   String
  entityId String

  action AdminAction

  before Json?
  after  Json?

  requestId String?
  ip        String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId, createdAt])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("admin_audit_logs")
}

/// =============================================================
/// RBAC / Permissions (только для админов)
/// -------------------------------------------------------------
model Role {
  id String @id @default(uuid())

  name        String   @unique
  description String?
  isDeleted   Boolean? @default(false)

  admins      Admin[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("roles")
}

model Permission {
  id String @id @default(uuid())

  key         String  @unique
  description String?

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model AdminResourcePermission {
  id String @id @default(uuid())

  adminId String
  admin   Admin  @relation(fields: [adminId], references: [id])

  resourceType String
  resourceId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([adminId, resourceType, resourceId])
  @@index([adminId])
  @@index([resourceType, resourceId])
  @@map("admin_resource_permissions")
}

/// =============================================================
/// NOTIFICATIONS
/// -------------------------------------------------------------
model EmailLog {
  id String @id @default(uuid())

  to      String
  subject String
  type    EmailType

  status EmailStatus @default(SENT)
  error  String?

  rentalId String?
  rental   CellRental? @relation(fields: [rentalId], references: [id], onDelete: SetNull)

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  sentAt DateTime @default(now())

  @@map("email_logs")
}

enum EmailType {
  RENTAL_EXPIRATION
  PAYMENT_REMINDER
  RENTAL_EXTENDED
  OTHER
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}

/// =============================================================
/// REQUEST AND LIST MODEL FOR CRM SYSTEM
/// -------------------------------------------------------------
model Request {
  id String @id @default(uuid())

  email     String?
  phone     String?
  name      String
  sizeform  String?
  location  String?
  comment   String?
  isDeleted Boolean? @default(false)

  status ListStatus @default(WAITING)

  closedById String?
  closedBy   Admin?    @relation(fields: [closedById], references: [id])
  closedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("requests")
}

model List {
  id String @id @default(uuid())

  email       String?
  phone       String?
  name        String
  description String?
  comment     String?
  isDeleted   Boolean? @default(false)

  status ListStatus @default(WAITING)

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  sizeId String?
  size   SizeCells? @relation(fields: [sizeId], references: [id], onDelete: SetNull)

  closedById String?
  closedBy   Admin?    @relation(fields: [closedById], references: [id])
  closedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("lists")
}

enum ListStatus {
  WAITING
  CLOSED
}

/// =============================================================
/// PAYMENTS AND CELL RENTAL MODEL FOR CRM SYSTEM
/// -------------------------------------------------------------
model Payment {
  id String @id @default(uuid())

  amount         Int
  orderId        String?  @unique
  description    String?
  bankPaymentId  String?
  paymentUrl     String?
  rentalDuration Int?
  isDeleted      Boolean? @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cellRentalId String?
  cellRental   CellRental? @relation(fields: [cellRentalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("payments")
}

model CellRental {
  id String @id @default(uuid())

  cellId String?
  cell   Cells[]

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  startDate      DateTime
  endDate        DateTime
  lastExtendedAt DateTime?
  extensionCount Int       @default(0)
  closedAt       DateTime?
  isDeleted      Boolean?  @default(false)

  statusId String?
  status   CellStatus? @relation(fields: [statusId], references: [id], onDelete: SetNull)

  payments    Payment[]
  relayAccess RelayAccess[]
  emailLogs   EmailLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("cell_rentals")
}

/// =============================================================
/// STORAGE MODELS FOR SYSTEM APPLICATION STORAGE
/// -------------------------------------------------------------
model City {
  id String @id @default(uuid())

  title      String
  short_name String   @unique
  isDeleted  Boolean? @default(false)

  locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("citys")
}

model Location {
  id String @id @default(uuid())

  name       String
  short_name String   @unique
  address    String?
  isDeleted  Boolean? @default(false)

  cityId String
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  containers Containers[]
  lists      List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("locations")
}

model Containers {
  id String @id @default(uuid())

  name      Int      @unique
  isDeleted Boolean? @default(false)

  locId    String?
  location Location? @relation(fields: [locId], references: [id], onDelete: SetNull)

  cells Cells[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("containers")
}

model Cells {
  id String @id @default(uuid())

  name      String
  comment   String?
  isDeleted Boolean? @default(false)

  containerId String
  container   Containers @relation(fields: [containerId], references: [id], onDelete: Cascade)

  size_id String?
  size    SizeCells? @relation(fields: [size_id], references: [id], onDelete: SetNull)

  rentals CellRental[]

  relay Relay?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("cells")
}

model CellStatus {
  id String @id @default(uuid())

  name      String
  color     String
  isDeleted Boolean? @default(false)

  statusType CellRentalStatus @unique

  rentals CellRental[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("cell_statuses")
}

enum CellRentalStatus {
  ACTIVE
  EXPIRING_SOON
  EXPIRED
  CLOSED
  RESERVATION
  EXTENDED
  PAYMENT_SOON
}

model SizeCells {
  id String @id @default(uuid())

  name       String
  short_name String   @unique
  area       String
  size       String
  isDeleted  Boolean? @default(false)

  cells Cells[]
  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("size_cells")
}

/// =============================================================
/// PANELS AND RELAYS MODELS FOR CONTROLS SYSTEM CELLS
/// -------------------------------------------------------------
model Panel {
  id String @id @default(uuid())

  name      String
  ipAddress String   @unique
  port      Int
  login     String
  password  String
  isDeleted Boolean? @default(false)

  relays Relay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("panels")
}

model Relay {
  id String @id @default(uuid())

  relayNumber Int
  name        String
  type        RelayType
  isDeleted   Boolean?  @default(false)

  panelId String
  panel   Panel  @relation(fields: [panelId], references: [id], onDelete: Cascade)

  cellId String? @unique
  cell   Cells?  @relation(fields: [cellId], references: [id], onDelete: SetNull)

  access RelayAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([panelId, relayNumber])
  @@index([isDeleted])
  @@map("relays")
}

model RelayAccess {
  id String @id @default(uuid())

  isDeleted Boolean? @default(false)

  relayId String
  relay   Relay  @relation(fields: [relayId], references: [id], onDelete: Cascade)

  cellRentalId String?
  cellRental   CellRental? @relation(fields: [cellRentalId], references: [id], onDelete: SetNull)

  validUntil DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDeleted])
  @@map("relay_access")
}

enum RelayType {
  SECURITY
  LIGHT
  GATE
}
