generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Основной пользователь
model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  role     UserRole @default(CLIENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   Client?
  payments Payment[]

  @@map("users")
}

// РОЛИ
enum UserRole {
  SUPERADMIN
  ADMIN
  CLIENT
}

// Подмодель для клиентов
model Client {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  phones  ClientPhone[]
  rentals CellRental[]

  @@map("clients")
}

// Телефоны клиентов
model ClientPhone {
  id    String @id @default(uuid())
  phone String

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_phones")
}

// Платежи
model Payment {
  id               String  @id @default(uuid())
  amount           Int
  orderId          String? @unique
  description      String?
  userId           String
  user             User    @relation(fields: [userId], references: [id])
  status           Boolean @default(false)
  tinkoffPaymentId String?
  paymentUrl       String?
  rentalDuration   Int?    // Срок аренды в днях, который покрывает этот платеж

  cellRentalId String?
  cellRental   CellRental? @relation(fields: [cellRentalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Города связаны с локациями
model City {
  id         String @id @default(uuid())
  title      String
  short_name String @unique

  locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("citys")
}

// Локации связаны с городами
model Location {
  id         String  @id @default(uuid())
  name       String
  short_name String  @unique
  address    String?

  cityId     String
  city       City         @relation(fields: [cityId], references: [id], onDelete: Cascade)
  containers Containers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

// Контейнеры связаны с ячейками
model Containers {
  id   String @id @default(uuid())
  name Int    @unique

  locId    String?
  location Location? @relation(fields: [locId], references: [id], onDelete: SetNull)
  cells    Cells[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("containers")
}

// Ячейки связаны с контейнерами
model Cells {
  id      String  @id @default(uuid())
  name    String
  comment String?

  containerId String
  container   Containers @relation(fields: [containerId], references: [id], onDelete: Cascade)

  size_id String?
  size    SizeCells? @relation(fields: [size_id], references: [id], onDelete: SetNull)

  statusId String?
  status   CellStatus? @relation(fields: [statusId], references: [id], onDelete: SetNull)

  rentals CellRental[]

  // Связь с реле (1 ячейка - 1 реле)
  relay Relay?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cells")
}

// Статусы ячеек
model CellStatus {
  id    String @id @default(uuid())
  name  String
  color String

  statusType CellRentalStatus?

  cells   Cells[]
  rentals CellRental[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cell_statuses")
}

// Размеры ячеек
model SizeCells {
  id         String @id @default(uuid())
  name       String
  short_name String @unique
  area       String
  size       String

  cells Cells[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("size_cells")
}

// Модель панель
model Panel {
  id        String @id @default(uuid())
  name      String
  ipAddress String @unique
  port      Int
  login     String
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  relays    Relay[]

  @@map("panels")
}

// Модель реле
model Relay {
  id          String    @id @default(uuid())
  relayNumber Int
  name        String
  type        RelayType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  panelId String
  panel   Panel         @relation(fields: [panelId], references: [id], onDelete: Cascade)
  access  RelayAccess[]

  // Связь с ячейкой (1 реле - 1 ячейка)
  cellId String? @unique
  cell   Cells?  @relation(fields: [cellId], references: [id], onDelete: SetNull)

  @@unique([panelId, relayNumber])
  @@map("relays")
}

model RelayAccess {
  id      String @id @default(uuid())
  relayId String
  relay   Relay  @relation(fields: [relayId], references: [id], onDelete: Cascade)

  // Связь с арендой
  cellRentalId String?
  cellRental   CellRental? @relation(fields: [cellRentalId], references: [id], onDelete: SetNull)

  validUntil DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("relay_access")
}

enum RelayType {
  SECURITY // Дверь
  LIGHT // Свет
  GATE // Ворота
}

// Модель для аренды ячеек
model CellRental {
  id String @id @default(uuid())

  // Связь с ячейкой
  cellId String?
  cell   Cells?  @relation(fields: [cellId], references: [id], onDelete: SetNull)

  // Связь с клиентом
  clientId String?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  // Даты и статусы
  startDate      DateTime
  endDate        DateTime
  lastExtendedAt DateTime?
  extensionCount Int       @default(0)
  isActive       Boolean   @default(true)

  // Статусы аренды
  rentalStatus CellRentalStatus @default(ACTIVE) // Программный статус аренды
  statusId     String?
  status       CellStatus?      @relation(fields: [statusId], references: [id], onDelete: SetNull)

  // Завершение аренды
  closedAt DateTime?

  // Связь с платежами
  payments Payment[]

  // Доступ к реле
  relayAccess RelayAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cellId, isActive], name: "UniqueActiveRental", map: "unique_active_rental")
  @@map("cell_rentals")
}

// Статусы аренды ячеек
enum CellRentalStatus {
  ACTIVE // Активная аренда
  EXPIRING_SOON // Скоро истекает (осталось меньше недели)
  EXPIRED // Просрочена (дата окончания в прошлом)
  CLOSED // Договор закрыт администратором
  RESERVATION // Бронь
  EXTENDED // Продлен
  PAYMENT_SOON // Скоро оплата
}
