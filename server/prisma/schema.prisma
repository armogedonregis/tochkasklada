// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String  @unique
  password  String
  role      String   @default("CLIENT")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  client    Client?
  
  @@map("users")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Связь с пользователем
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  phones    ClientPhone[]
  
  @@map("clients")
}

// Модель для хранения телефонов клиентов
model ClientPhone {
  id        String   @id @default(uuid())
  phone     String

  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("client_phones")
}

// Модели для работы со складами

model City {
  id         String @id @default(uuid())
  title      String
  short_name String @unique

  locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("citys")
}

model Location {
  id         String @id @default(uuid())
  name       String
  short_name String @unique
  address    String

  cityId String
  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)
  containers Containers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model Containers {
  id Int @id @default(autoincrement())

  locId String
  location Location @relation(fields: [locId], references: [id], onDelete: Cascade)
  cells Cells[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("containers")
}

model Cells {
  id         String  @id @default(uuid())
  size_id    String
  name       String
  len_height String? // Длина высота?

  containerId Int
  container   Containers @relation(fields: [containerId], references: [id], onDelete: Cascade)
  size        SizeCells  @relation(fields: [size_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cells")
}

model SizeCells {
  id   String @id @default(uuid())
  name String
  size String
  area String // Площадь

  cells Cells[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("size_cells")
}

// Модели для работы с панелями и реле

model Panel {
  id        String  @id @default(uuid())
  name      String
  ipAddress String
  port      Int
  login     String
  password  String
  isActive  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  relays    Relay[]

  @@map("panels")
}

model Relay {
  id          String    @id @default(uuid())
  panelId     String
  relayNumber Int
  name        String
  type        RelayType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  panel  Panel         @relation(fields: [panelId], references: [id])
  access RelayAccess[]

  @@unique([panelId, relayNumber])
  @@map("relays")
}

model RelayAccess {
  id             String   @id @default(uuid())
  userId         String   // Изменено с supabaseUserId на userId для соответствия нашей модели
  relayId        String
  validUntil     DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  relay Relay @relation(fields: [relayId], references: [id])

  @@map("relay_access")
}

enum RelayType {
  SECURITY
  LIGHT
  GATE
}
